### 10. Организация памяти программы. Стек вызовов и принцип его работы.
#### Теория
**Организация памяти программы** в Си делится на несколько сегментов:
- **Стек (stack)**: Хранит локальные переменные, параметры функций и информацию о вызовах функций. Управляется автоматически.
- **Куча (heap)**: Используется для динамической памяти (`malloc`, `free`).
- **Сегмент данных (data)**: Хранит глобальные и статические переменные, инициализированные ненулевыми значениями.
- **Сегмент BSS**: Хранит неинициализированные глобальные и статические переменные.
- **Сегмент кода (text)**: Хранит машинный код программы.

**Стек вызовов**:
- Стек — это структура данных типа LIFO (Last In, First Out), используемая для хранения информации о вызовах функций.
- Каждый вызов функции создаёт **фрейм стека**, содержащий:
  - Локальные переменные.
  - Параметры функции.
  - Адрес возврата (куда вернуться после завершения функции).
  - Сохранённые регистры.
- При вызове функции стек растёт вниз (уменьшение адресов), при возврате — освобождается.
- Переполнение стека (stack overflow) происходит при слишком глубокой рекурсии или чрезмерном использовании локальных переменных.
**Принцип работы**:
1. При вызове функции создаётся новый фрейм стека.
2. В фрейм записываются параметры, локальные переменные и адрес возврата.
3. После завершения функции фрейм удаляется, а управление возвращается вызывающей функции.

Когда программа запускается, операционная система выделяет ей виртуальное адресное пространство, которое делится на несколько сегментов:

        Код (Text)        Хранит исполняемые инструкции программы (машинный код).
        Данные (Data)        Глобальные и статические переменные.
        Куча (Heap)        Динамическая память, выделяемая через malloc.
        Стек (Stack)        Локальные переменные, аргументы функций, адреса возврата.

Стек вызовов — это структура данных, которая управляет выполнением функций в программе. Он работает по принципу LIFO (Last In, First Out) — последняя вызванная функция выполняется первой.

Что хранится в стеке вызовов?
        Локальные переменные функции.
        Аргументы, переданные в функцию.
        Адрес возврата (куда вернуться после выполнения функции).
        Предыдущий кадр стека (значение ebp в x86).

Принцип работы стека:
        Когда одна функция вызывает другую, создается новый кадр стека (stack frame) для вызываемой функции.
        В этот кадр стека помещаются:
                Аргументы функции
                Локальные автоматические переменные 
                Адрес возврата , чтобы программа знала, куда вернуться после завершения функции.
                Когда функция завершает выполнение, 
                        её кадр стека "выталкивается" (pop) из стека.Локальные переменные уничтожаются, и управление передается по адресу возврата обратно в вызывающую функцию.

