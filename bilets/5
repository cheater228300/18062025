4. Структуры и перечисления в языке Си. Примеры.
Теория
Структуры (struct) позволяют объединять данные разных типов в одну пользовательскую сущность. Это полезно для представления сложных объектов, таких как записи о студентах, точках в пространстве и т.д.
Основные аспекты структур:
•	Объявление: struct имя { тип поле1; тип поле2; ... };.
•	Доступ к полям: Через оператор . для объектов и -> для указателей на структуры.
•	Инициализация: Поля структуры можно инициализировать при создании.
Перечисления (enum) позволяют задавать набор именованных целочисленных констант. Это удобно для представления фиксированного набора значений, таких как дни недели или состояния.
Основные аспекты перечислений:
•	Объявление: enum имя { значение1, значение2, ... };.
•	Значения: Каждому имени присваивается целое число (по умолчанию начиная с 0).
•	Использование: Переменные типа enum могут принимать только заданные значения.
Структуры позволяет хранит несколько элементов разного типа.

        Обьявление: 
                        Обьявлется шаблон структуры.
                        Обьявление переменной типа структуры(Выделение памяти).
                                Инициализацию можно делать при обьявлении.
                                Назначенные инициализаторы(С99) только выбранные.

        Доступ к членам структуры:
                        Точки.

        Указатели на структуры:
                        Доступ к элементам через указатель(->).
                        Для получения адресса структуры(&).

Передача в функции:
                По обычному
                По адрессу
                По значению(копия).
                Возращение адреса.

Массивы структур:
                Доступ по индексу, а затем с помощью точки.
                Данные структур можно записывать в файл.

Перечисления:
                Определение целочисленных констант с помощью имен.
                Обьявление:по умолчанию с 0 и далее.
                Присваивание своих значений.

Допольнительно:
                Обьединения:использование одной и той же памяти.
                typedef: новый идентификатор для типа данных.________________________________________
