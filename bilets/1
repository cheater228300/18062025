1. Указатели в языке Си. Арифметика указателей. Примеры.
Теория
Указатель в языке Си — это переменная, которая хранит адрес памяти другой переменной. Указатели позволяют напрямую работать с адресами памяти, что делает их мощным инструментом для управления данными, динамического выделения памяти и оптимизации программ.
Основные аспекты указателей:
Объявление указателя: Указатель объявляется с использованием символа *. Например, int *ptr; — указатель на переменную типа int.
Операторы: 
& — оператор взятия адреса (возвращает адрес переменной).
* — оператор разыменования (доступ к значению по адресу, хранимому в указателе).
Присваивание: Указателю можно присвоить адрес переменной с помощью & или другой указатель.
NULL-указатель: Указатель, не указывающий на валидный адрес, может быть инициализирован как NULL.
Арифметика указателей: Арифметика указателей позволяет перемещаться по адресам памяти. Она учитывает размер типа данных, на который указывает указатель. Например, если указатель типа int* указывает на адрес 1000, а размер int равен 4 байтам, то ptr + 1 указывает на адрес 1004.
Основные операции арифметики указателей:
Инкремент/декремент (++, --): Перемещение указателя на следующий/предыдущий элемент.
Сложение/вычитание (+, -): Смещение указателя на заданное количество элементов.
Разность указателей: Вычисление расстояния между двумя указателями (в элементах).
Ограничения: Арифметика указателей допустима только в пределах одного массива или выделенной области памяти.
Операции над указателями
                & - взятие адресса
                *  - взятие значения по адрессу(разыменовывание)
                printf("%p",p) -вывод адресов\в 16-ом формате.

Арифметика указателей:
                Инкремент и декремент-переход к элементам рядом.
                Сложение  и вычитание целых чисел
                Вычитание указателей- расстояние между элементами.
                Сравнивание одного типа указателей.

Примеры:
                Изменение переменных в вызывающей функции(scanf).
                Динамическое выделение памяти (malloc).
                Имя массива -адрес первого элемента arr=&arr[0]
                arr[i]=*(arr+i)
                Передача массива в функцию arr[] или *arr

Допольнительно:
                Нельзя записывать без адреса (int* pt;  *pt=5)
                Си не следит за границами массива.
                const* pt - не дает изменить данные по адрессу.
                Имя массива константа.________________________________________
